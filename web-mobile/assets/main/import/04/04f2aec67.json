[1,["9e5LMmDM1Nr5quRtQU+fOS","b5snqx50BDmLQHhI/CssiX@6c48a","eadHiwQI1AUrcD8NI1Xglf","b4sPq0XCJOBrCmeCHeMXUb","abpJ0oz6NFn6LaNqIbEMa5","13VznTmLxIhbMDPHfPnpav","15vipM4dxBDrOxyoRgtOwa","a2czqKzbFF+Jy8h9OHs8Ph@6c48a","a8t6xKqrxOeZE6XO5+pU6G@0089c","f8hBXiqiBBW5jlJqxdqBMK@0089c","f8hBXiqiBBW5jlJqxdqBMK@221a5","12Y9dMgWdJKJGmTiZyQR9H@a804a","beArurqWJCFIJbxkEfm3I5","54hsW5msVG7q3Xf5rCbMko@0d683","faC+FsEBBC4KFPlTM6Rwsi","78jLZN8E9NtIMwc0M7ctkE","12Y9dMgWdJKJGmTiZyQR9H@fc873","998fwQpwVI5Z3QCFxicb0d@aeaac","2bnyfGLTxHrYZHq7cEJUSM","0cp9W03odIvYe5OKE3zBDu","a5i0xMU8xFXqG/pJi/iK8Q@f9941","6aHFvT38FP/LGfZPjdUR7S","3cKPgsEahDP6tkTPDW3Vq7","fbbN0eEa1IYqPGl/Jieiub@6c48a","f1I81iKPdKnLilj96s5cAj","afuqRkOVVCAIQtxzjbzyON@221a5","151hCclHhN5Z+jlLnejnkJ","a8t6xKqrxOeZE6XO5+pU6G@9b633","a8t6xKqrxOeZE6XO5+pU6G@3effa","a8t6xKqrxOeZE6XO5+pU6G@221a5","3611SumE1M8LeNdFJOtAXv@6c48a","f8hBXiqiBBW5jlJqxdqBMK@3effa","1b+NnSdXNAwpTyip8lqVpF","0esGZC7jRARrXHumOHcBMC","9f9e4359VEKIt0Z76XTBc/","1ceT6X86pG3JpjYzFzQhga","cea3H6VhtLBLm/b4OBWagG@8f7ab","d7dozldqRFz7GgrrKH+SMq@51988","998fwQpwVI5Z3QCFxicb0d@97c49","3bXY1has9E4ImxroVqi4DI@727ca","60tqWytEBORoNa0rRne47l","3bXY1has9E4ImxroVqi4DI@181b3","229WBxHKNJeqVBsNcGsLp8@6c48a","f8hBXiqiBBW5jlJqxdqBMK@08bb5","3eqmxHfKlJmpoEJ+tZmLBE@adc7a","c7tLm9ayBKsa3d4yY9cyZJ@900af","a8t6xKqrxOeZE6XO5+pU6G@5858c","cbRWJ774tFuKvDqfPD/rti@7242f","afuqRkOVVCAIQtxzjbzyON@e4c30","9feqKl4EVJurUaSDPicaoh@642fd","29O/J56RxG+4zEKFBaLP8u","aepWxf7c5JJL0Nov7V3l2f@10a81","19TxDqY4FIAYuX//5gMOMn","3669v7dgZENYTeTvhWU7rn","dank3xtelBooOAoSbkdgGA@f9941","3611SumE1M8LeNdFJOtAXv@f9941","bdQ+EleLdOmZ/XQJRbnkNN@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","40cuMKPF5JSYRNiUWqQwbx@b47c0","33CnP7UMJDp7cSZ52OJB5e","54hsW5msVG7q3Xf5rCbMko@313e0","05wNCudytAy4TiOQYFw9yt@6c48a","035O08NXBGeby92wv/3z8b","cea3H6VhtLBLm/b4OBWagG@3effa","9feqKl4EVJurUaSDPicaoh@221a5","9feqKl4EVJurUaSDPicaoh@3effa","9feqKl4EVJurUaSDPicaoh@0089c","8ch80+rXtHt6sM5/J4F0QA","9feqKl4EVJurUaSDPicaoh@87322","2cSQ5lAotLz423T2MkqlRs","a5i0xMU8xFXqG/pJi/iK8Q@6c48a","2aC1aNRSdN9bRe1mdSWyJ4","a8t6xKqrxOeZE6XO5+pU6G@b46eb","e6nQfPLPROVoT5D/tWSO7V","afuqRkOVVCAIQtxzjbzyON@2f471","26HSwH/sVON7mrsxrX/SH4","25GJ3xoXBGvKnyYF8W23QZ","c7tLm9ayBKsa3d4yY9cyZJ@b7142","cbRWJ774tFuKvDqfPD/rti@eeafe","7fYSlux49Plor6y0Pf1HFR","farVtX5TlKrYtFlKk+Ozxx","f1bEuAELdJ36ECoA/lSrNG","3cwn/Z+JFFXaTJr8UGHrtP","cea3H6VhtLBLm/b4OBWagG@82e31","dank3xtelBooOAoSbkdgGA@6c48a","afuqRkOVVCAIQtxzjbzyON@0089c","afuqRkOVVCAIQtxzjbzyON@3effa","d1NGQ2rJZCcbhjH0/erZWw","cea3H6VhtLBLm/b4OBWagG@50743","cea3H6VhtLBLm/b4OBWagG@99ea5","cea3H6VhtLBLm/b4OBWagG@9b782","f8hBXiqiBBW5jlJqxdqBMK@597d3","d7dozldqRFz7GgrrKH+SMq@0089c","act/wkko9PbZKmWACCIIlR@6c48a","d7dozldqRFz7GgrrKH+SMq@3effa","d7dozldqRFz7GgrrKH+SMq@9b633","d7dozldqRFz7GgrrKH+SMq@221a5","cea3H6VhtLBLm/b4OBWagG@0089c","cea3H6VhtLBLm/b4OBWagG@9b633","cea3H6VhtLBLm/b4OBWagG@221a5"],["node","targetInfo","root","_effectAsset","_mesh","asset","mainTexture","data","occlusionMap","pbrMap","value","normalMap","_parent","emissiveMap","_cpuMaterial","_mainTexture","_spriteFrame","_textureSource","_particleSystem","material","_gpuMaterial","noiseMap","trailParticle02","trailParticle01","_cameraComponent","_barSprite","scene","lenflareMaterial","shiptrailMaterial01","shiptrailMaterial02","_font","laserMaterial","enemyMaterial","shipMaterial","_envmapHDR","_envmapLDR","_reflectionHDR","_defaultClip"],[["cc.Node",["_name","_layer","_id","_objFlags","__editorExtras__","_parent","_components","_lpos","_children","_prefab","_lrot","_euler","_lscale"],-2,1,9,5,2,4,5,5,5],"cc.ImageAsset",["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color"],1,1,6,5],["cc.CurveRange",["mode","constant","constantMin","constantMax","spline"],-1,4],["cc.MeshRenderer",["_name","_reflectionProbeId","node","_materials","bakeSettings","_mesh","__prefab"],1,1,3,4,6,4],"cc.SpriteFrame",["cc.Material",["_name","_defines","_states","_techIdx","_props"],-1,12],["cc.Node",["_name","_objFlags","_parent","_components","_children","_lrot","_euler","_prefab","__editorExtras__","_lpos"],1,1,2,2,5,5,4,11,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren","mountedComponents"],1,9,9,9],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.GradientRange",["_mode","gradient","color"],2,4,5],["cc.ShapeModule",["_enable","_shapeType","radius","emitFrom","radiusThickness","arcSpeed"],-2,4],["cc.RealKeyframeValue",["interpolationMode","value","rightTangentWeight","leftTangentWeight"],-1],["cc.TrailModule",["_enable","_minParticleDistance","widthFromParticle","colorFromParticle","lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],-1,4,4,4,4,1],["cc.ParticleSystemRenderer",["_renderMode","_velocityScale","_alignSpace","_cpuMaterial","_mainTexture","_gpuMaterial"],0,6,6,6],"cc.TextureCube",["cc.Widget",["_alignFlags","_top","node"],1,1],["cc.Camera",["_far","_clearFlags","_visibility","_near","_projection","_priority","_orthoHeight","node","_color"],-4,1,5],["cc.ParticleSystem",["duration","_capacity","loop","playOnAwake","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer","node"],-1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4,4,1],["cc.AlphaKey",["alpha","time"],1],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.ForceOvertimeModule",["space","x","y","z"],2,4,4,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.NoiseModule",["_strengthX","_strengthY","_strengthZ","_noiseSpeedX","_noiseSpeedY","_noiseSpeedZ","_noiseFrequency"],-4],["cc.MeshRenderer",["_materials","_name","node","bakeSettings","_mesh","__prefab"],1,1,4,6,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Mesh",["_native","_hash","_struct"],0],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_layer","_parent","_components","_lpos"],1,1,12,5],["c883a5gLRZKwIqJTUcMDvB8",["node","trailParticle01","trailParticle02","lenflareMaterial","shiptrailMaterial01","shiptrailMaterial02"],3,1,1,1,6,6,6],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,9],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["189a8sT2OxBsqmpE63Qa3ms",["forbidX","forbidY","forbidPanX","forbidPanY","forbidZ","node","lens","_spherical","_lookAt"],-2,1,4,4,5],["Lens",["near","far"],1],["Spherical",["radius","phi"],1],["f19b17FM2lJiJ7dRP6LKLsd",["node","base","tonemap","fxaa","bloom"],3,1,4,4,4,4],["Base",["material"],3,6],["Tonemap",["type"],2],["FXAA",["enable","material"],2,6],["Bloom",["material"],3,6],["9ee139SJIJGv4pIQOLKqhUH",["state","node"],2,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.ProgressBar",["_totalLength","_progress","node","_barSprite"],1,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5],["cc.ShadowsInfo",["_type","_shadowColor","_size"],2,5,5],["cc.SkyboxInfo",["_envLightingType","_envmapHDR","_envmapLDR","_reflectionHDR"],2,6,6,6],["cc.FogInfo",["_type","_enabled","_fogStart","_fogEnd","_fogAtten","_fogColor"],-2,5],["cc.OctreeInfo",[],3],["cc.SkinInfo",["_enabled"],2],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["02f44GNVflGdIkO3jD8UOXd",["node"],3,1],["cc.ParticleSystem",["duration","loop","playOnAwake","node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer"],0,1,12,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4,4],["cc.Burst",["count"],3,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["alphaKeys"],3,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.RealCurve",["_times","_values"],2,9],["cc.Label",["_string","_actualFontSize","_fontSize","_isSystemFontUsed","_spacingX","node","_font"],-2,1,6],["cc.ModelBakeSettings",[],3],["cc.Animation",["node","_clips"],3,1,3],["802160Zq2FO7qjbPgVcg9Hw",["node","group"],3,1,1],["12ba9g+myZB/5u/9o4+jogs",["node","building","buildingBox","bridge","bridgeBox","bottom","enemyCars"],3,1,1,1,1,1,1,2],["6dc66JgvoxI1LfYrGOBLRLm",["node","enemy","warnning","laserMaterial","enemyMaterial"],3,1,1,1,6,6],["b3b13wxTkxD9JVZer6LmN0f",["node","battery"],3,1,1],["59b47+yGJ9Oa6DNf0Bsf51B",["node","shipMaterial"],3,1,6],["81a848+EBRGfLLNCAe3/Qp6",["node","batteryParticle","meshParticle"],3,1,1,1],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2]],[[3,1],[37,0,2],[40,0,1,2,2],[39,0,1,2,2],[41,0,1,2,3],[34,0,1,2,3,4,5,5],[3,1,2],[76,1],[32,0,1,2,3,4,5,4],[38,0,1,2,3],[26,0,1,2,4],[6,0,2,1,4,4],[0,3,4,5,9,3],[0,0,8,9,2],[84,0,2],[85,0,2],[0,0,5,6,2],[8,0,1,2,3],[19,0,1,3],[4,2,6,3,4,5,1],[0,0,5,6,9,2],[10,1],[10,2,1],[3,0,2,3,4],[12,0,1,3],[6,0,3,2,1,4,5],[25,0,1,2,3],[43,0,1,2,2],[9,0,1,1],[10,0,1,2],[3,0,4,2],[68,0,1],[69,0,1,2],[70,0,1],[19,0,2],[71,0,1,2,3,1],[72,0,1,2,1],[73,0,1,1],[74,0,1,2],[28,0,1,2,4],[0,0,5,8,7,2],[7,1,2,7,8,2],[7,0,2,3,9,2],[8,0,1,3,2,3],[42,0,1,2,2],[20,1,2,3,4,1],[21,1,2,3,1],[23,1],[4,0,2,3,4,5,2],[27,0,1,2,3,5],[0,0,2,8,3],[0,0,1,5,6,7,3],[0,0,5,6,9,12,2],[30,0,1,2,3,4,3],[35,0,1,1],[9,0,1,2,1],[18,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,3],[11,3,5,2],[22,2,3,4,5,1],[22,0,1,2,3,4,5,3],[13,0,1,2,3,4,5,6,7,8,5],[14,3,4,1],[6,0,1,4,3],[29,0,2],[0,0,5,8,6,2],[0,0,1,8,6,7,3],[0,0,2,8,6,7,10,11,3],[0,0,1,2,8,6,7,4],[0,0,1,5,8,6,3],[0,0,5,7,2],[0,0,1,5,8,7,3],[0,0,5,8,12,2],[0,0,5,6,7,10,12,11,2],[0,0,5,6,10,11,2],[0,0,5,6,7,2],[0,0,1,5,6,7,12,3],[0,0,5,6,7,10,11,2],[7,0,2,4,3,5,6,2],[31,0,1,2,3,4,5,1],[33,0,1,2,3,4,5,6],[8,0,1,4,2,3],[36,0,1,1],[9,0,1],[16,0,1,2,3],[16,0,2,2],[2,2,1],[2,1,0,2,3,3],[2,0,2,4,3,2],[2,1,0,2,4,3,3],[2,1,0,2,3],[17,3,0,1,2,7,8,5],[17,4,5,6,0,1,2,7,8,7],[44,0,1,2,3,4,5,6,7,8,6],[45,0,1,3],[46,0,1,3],[47,0,1,2,3,4,1],[48,0,1],[49,0,2],[50,0,1,2],[51,0,1],[52,0,1,2],[53,0,1,1],[54,0,1,2,3,3],[55,0,1,2,3,2],[56,0,1,2,3,4,5,6,7,1],[57,0,1,2,3,2],[58,0,1,2,2],[59,0,1,2,3,2],[60,0,1,2,3,4,5,6],[61,1],[62,0,2],[63,1],[64,1],[65,0,1,1],[66,0,1],[18,0,2,3,30,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[67,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[11,0,1,2,5,4],[11,0,1,2,4,5,5],[20,0,1,2,3,4,2],[21,0,1,2,3,2],[12,0,1,2,4],[12,0,3,3],[23,0,1,2,3,4,5,6,8],[13,4,5,6,7,1],[13,4,5,6,7,8,1],[14,3,5,4,1],[14,0,1,2,3,5,4,4],[75,0,1,2,3,4,5,6,6],[4,1,2,3,4,5,2],[4,2,3,4,5,1],[24,1,0,2,3,4,3],[24,0,2,5,3,4,2],[77,0,1,1],[78,0,1,1],[79,0,1,2,3,4,5,6,1],[80,0,1,2,3,4,1],[81,0,1,1],[82,0,1,1],[83,0,1,2,1]],[[[[26,".bin",2531713262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[26,".bin",3476720256,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[11,"particleGet",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{}],[[[{},"tintColor",8,[4,2134259254],"mainTexture",6,0],{}],11,0]]],0,0,[0,0],[6,3],[1,26]],[[[39,"../pipeline-next/materials/base",[{"hash":382355475,"name":"../pipeline-next/materials/base|base-vs:vert|blit-fs:frag","blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nout vec2 v_uv;\nvec4 vert() {\n  v_uv = a_texCoord;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nvec4 frag() {\n  return texture(mainTexture, v_uv);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying vec2 v_uv;\nvec4 vert() {\n  v_uv = a_texCoord;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\nvec4 frag() {\n  return texture2D(mainTexture, v_uv);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":0}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"}]},{"hash":1690996107,"name":"../pipeline-next/materials/base|base-vs:vert|tonemap-fs:frag","blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nout vec2 v_uv;\nvec4 vert() {\n  v_uv = a_texCoord;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec2 v_uv;\nuniform sampler2D mainTexture;\n#define tonemapParams cc_debug_view_mode\n#define u_intensity   tonemapParams.x\nvec3 tonemapping(in vec3 x) {\n  x = x/(x+0.187) * 1.035;\n  return x;\n}\nvec4 frag() {\n  vec4 pixel = texture(mainTexture, v_uv);\n  pixel.rgb = tonemapping(pixel.rgb) * u_intensity;\n  return pixel;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying vec2 v_uv;\nvec4 vert() {\n  v_uv = a_texCoord;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_debug_view_mode;\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\n#define tonemapParams cc_debug_view_mode\n#define u_intensity   tonemapParams.x\nvec3 tonemapping(in vec3 x) {\n  x = x/(x+0.187) * 1.035;\n  return x;\n}\nvec4 frag() {\n  vec4 pixel = texture2D(mainTexture, v_uv);\n  pixel.rgb = tonemapping(pixel.rgb) * u_intensity;\n  return pixel;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"}]},{"hash":1483185033,"name":"../pipeline-next/materials/base|base-vs:vert|tonemap-rgb-fs:frag","blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nout vec2 v_uv;\nvec4 vert() {\n  v_uv = a_texCoord;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nvec3 tonemapping(in vec3 x) {\n  x = x/(x+0.187) * 1.035;\n  return x;\n}\n#define tonemapParams     cc_debug_view_mode\n#define u_intensity       tonemapParams.x\n#define u_damage          tonemapParams.y\nvec4 frag() {\n  vec2 uv = v_uv;\n  vec4 pixel = texture(mainTexture, uv);\n  vec3 color = vec3(0.0);\n  color.r = texture(mainTexture, vec2(uv.x + 0.0005, uv.y)).r;\n  color.g = texture(mainTexture, vec2(uv.x + 0.000, uv.y)).g;\n  color.b = texture(mainTexture, vec2(uv.x - 0.0005, uv.y)).b;\n  float damage = length(uv - 0.5);\n  color.r += damage * damage * u_damage * 2.;\n  color *= vec3(0.95,1.05,0.95);\n  float y = fract(uv.y * 150.);\n  color *= 0.9 + 1.03 * mix(-y*y,y*(y-2.)+1.,y);\n  color.rgb = tonemapping(color.rgb) * u_intensity;\n  return vec4(color, pixel.a);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying vec2 v_uv;\nvec4 vert() {\n  v_uv = a_texCoord;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_debug_view_mode;\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\nvec3 tonemapping(in vec3 x) {\n  x = x/(x+0.187) * 1.035;\n  return x;\n}\n#define tonemapParams     cc_debug_view_mode\n#define u_intensity       tonemapParams.x\n#define u_damage          tonemapParams.y\nvec4 frag() {\n  vec2 uv = v_uv;\n  vec4 pixel = texture2D(mainTexture, uv);\n  vec3 color = vec3(0.0);\n  color.r = texture2D(mainTexture, vec2(uv.x + 0.0005, uv.y)).r;\n  color.g = texture2D(mainTexture, vec2(uv.x + 0.000, uv.y)).g;\n  color.b = texture2D(mainTexture, vec2(uv.x - 0.0005, uv.y)).b;\n  float damage = length(uv - 0.5);\n  color.r += damage * damage * u_damage * 2.;\n  color *= vec3(0.95,1.05,0.95);\n  float y = fract(uv.y * 150.);\n  color *= 0.9 + 1.03 * mix(-y*y,y*(y-2.)+1.,y);\n  color.rgb = tonemapping(color.rgb) * u_intensity;\n  return vec4(color, pixel.a);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"}]}],[{"passes":[{"pass":"blit","program":"../pipeline-next/materials/base|base-vs:vert|blit-fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false}},{"pass":"tonemap","program":"../pipeline-next/materials/base|base-vs:vert|tonemap-fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false}},{"pass":"tonemap-rgb","program":"../pipeline-next/materials/base|base-vs:vert|tonemap-rgb-fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false}}]}]]],0,0,[],[],[]],[[[11,"CAR_LOW2_Baked",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_NORMAL_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true}],[[[{"roughness":0.56,"metallic":0.61,"emissive":10,"normalScale":0.6},"emissiveColor",8,[4,4294967295],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2,"pbrMap",6,3,"normalMap",6,4]],11]]],0,0,[0,0,0,0,0,0],[6,8,13,9,11,3],[8,27,28,8,29,0]],[[[39,"../pipeline-next/materials/fxaa",[{"hash":1525688739,"name":"../pipeline-next/materials/fxaa|fxaa-vs:vert|fxaa-fs:frag","blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define texelSize cc_debug_view_mode\nout vec2 vUv;\nout vec2 vUvDown;\nout vec2 vUvUp;\nout vec2 vUvLeft;\nout vec2 vUvRight;\nout vec2 vUvDownLeft;\nout vec2 vUvUpRight;\nout vec2 vUvUpLeft;\nout vec2 vUvDownRight;\nvec4 vert() {\n  vUv = a_texCoord;\n  vUvDown = vUv + vec2(0.0, -1.0) * texelSize.xy;\n  vUvUp = vUv + vec2(0.0, 1.0) * texelSize.xy;\n  vUvRight = vUv + vec2(1.0, 0.0) * texelSize.xy;\n  vUvLeft = vUv + vec2(-1.0, 0.0) * texelSize.xy;\n  vUvDownLeft = vUv + vec2(-1.0, -1.0) * texelSize.xy;\n  vUvUpRight = vUv + vec2(1.0, 1.0) * texelSize.xy;\n  vUvUpLeft = vUv + vec2(-1.0, 1.0) * texelSize.xy;\n  vUvDownRight = vUv + vec2(1.0, -1.0) * texelSize.xy;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define texelSize cc_debug_view_mode\nuniform sampler2D mainTexture;\n#define EDGE_THRESHOLD_MIN 0.0312\n#define EDGE_THRESHOLD_MAX 0.125\n#define SUBPIXEL_QUALITY 0.75\n#define SAMPLES 12\n#define QUALITY(q) ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\n#define ONE_OVER_TWELVE 0.08333333333333333\nin vec2 vUv;\nin vec2 vUvDown;\nin vec2 vUvUp;\nin vec2 vUvLeft;\nin vec2 vUvRight;\nin vec2 vUvDownLeft;\nin vec2 vUvUpRight;\nin vec2 vUvUpLeft;\nin vec2 vUvDownRight;\nfloat luminance(vec3 color) {\n  return dot(color, vec3( 0.2126729, 0.7151522, 0.0721750 ));\n}\nvec4 frag() {\n  vec2 uv = vUv;\n  vec4 inputColor = texture(mainTexture, vUv);\n  float lumaCenter = luminance(inputColor.rgb);\n  float lumaDown = luminance(texture(mainTexture, vUvDown).rgb);\n  float lumaUp = luminance(texture(mainTexture, vUvUp).rgb);\n  float lumaLeft = luminance(texture(mainTexture, vUvLeft).rgb);\n  float lumaRight = luminance(texture(mainTexture, vUvRight).rgb);\n  float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\n  float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\n  float lumaRange = lumaMax - lumaMin;\n  if(lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX)) {\n    return inputColor;\n  }\n  float lumaDownLeft = luminance(texture(mainTexture, vUvDownLeft).rgb);\n  float lumaUpRight = luminance(texture(mainTexture, vUvUpRight).rgb);\n  float lumaUpLeft = luminance(texture(mainTexture, vUvUpLeft).rgb);\n  float lumaDownRight = luminance(texture(mainTexture, vUvDownRight).rgb);\n  float lumaDownUp = lumaDown + lumaUp;\n  float lumaLeftRight = lumaLeft + lumaRight;\n  float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\n  float lumaDownCorners = lumaDownLeft + lumaDownRight;\n  float lumaRightCorners = lumaDownRight + lumaUpRight;\n  float lumaUpCorners = lumaUpRight + lumaUpLeft;\n  float edgeHorizontal = (\n    abs(-2.0 * lumaLeft + lumaLeftCorners) +\n    abs(-2.0 * lumaCenter + lumaDownUp ) * 2.0 +\n    abs(-2.0 * lumaRight + lumaRightCorners)\n  );\n  float edgeVertical = (\n    abs(-2.0 * lumaUp + lumaUpCorners) +\n    abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 +\n    abs(-2.0 * lumaDown + lumaDownCorners)\n  );\n  bool isHorizontal = (edgeHorizontal >= edgeVertical);\n  float stepLength = isHorizontal ? texelSize.y : texelSize.x;\n  float luma1 = isHorizontal ? lumaDown : lumaLeft;\n  float luma2 = isHorizontal ? lumaUp : lumaRight;\n  float gradient1 = abs(luma1 - lumaCenter);\n  float gradient2 = abs(luma2 - lumaCenter);\n  bool is1Steepest = gradient1 >= gradient2;\n  float gradientScaled = 0.25 * max(gradient1, gradient2);\n  float lumaLocalAverage = 0.0;\n  if(is1Steepest) {\n    stepLength = -stepLength;\n    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\n  } else {\n    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\n  }\n  vec2 currentUv = uv;\n  if(isHorizontal) {\n    currentUv.y += stepLength * 0.5;\n  } else {\n    currentUv.x += stepLength * 0.5;\n  }\n  vec2 offset = isHorizontal ? vec2(texelSize.x, 0.0) : vec2(0.0, texelSize.y);\n  vec2 uv1 = currentUv - offset * QUALITY(0);\n  vec2 uv2 = currentUv + offset * QUALITY(0);\n  float lumaEnd1 = luminance(texture(mainTexture, uv1).rgb);\n  float lumaEnd2 = luminance(texture(mainTexture, uv2).rgb);\n  lumaEnd1 -= lumaLocalAverage;\n  lumaEnd2 -= lumaLocalAverage;\n  bool reached1 = abs(lumaEnd1) >= gradientScaled;\n  bool reached2 = abs(lumaEnd2) >= gradientScaled;\n  bool reachedBoth = reached1 && reached2;\n  if(!reached1) {\n    uv1 -= offset * QUALITY(1);\n  }\n  if(!reached2) {\n    uv2 += offset * QUALITY(1);\n  }\n  if(!reachedBoth) {\n    for(int i = 2; i < SAMPLES; ++i) {\n      if(!reached1) {\n        lumaEnd1 = luminance(texture(mainTexture, uv1).rgb);\n        lumaEnd1 = lumaEnd1 - lumaLocalAverage;\n      }\n      if(!reached2) {\n        lumaEnd2 = luminance(texture(mainTexture, uv2).rgb);\n        lumaEnd2 = lumaEnd2 - lumaLocalAverage;\n      }\n      reached1 = abs(lumaEnd1) >= gradientScaled;\n      reached2 = abs(lumaEnd2) >= gradientScaled;\n      reachedBoth = reached1 && reached2;\n      if(!reached1) {\n        uv1 -= offset * QUALITY(i);\n      }\n      if(!reached2) {\n        uv2 += offset * QUALITY(i);\n      }\n      if(reachedBoth) {\n        break;\n      }\n    }\n  }\n  float distance1 = isHorizontal ? (uv.x - uv1.x) : (uv.y - uv1.y);\n  float distance2 = isHorizontal ? (uv2.x - uv.x) : (uv2.y - uv.y);\n  bool isDirection1 = distance1 < distance2;\n  float distanceFinal = min(distance1, distance2);\n  float edgeThickness = (distance1 + distance2);\n  bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\n  bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\n  bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\n  bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\n  float pixelOffset = -distanceFinal / edgeThickness + 0.5;\n  float finalOffset = correctVariation ? pixelOffset : 0.0;\n  float lumaAverage = ONE_OVER_TWELVE * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\n  float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\n  float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\n  float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\n  finalOffset = max(finalOffset, subPixelOffsetFinal);\n  vec2 finalUv = uv;\n  if(isHorizontal) {\n    finalUv.y += finalOffset * stepLength;\n  } else {\n    finalUv.x += finalOffset * stepLength;\n  }\n  return texture(mainTexture, finalUv);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision mediump float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nuniform mediump vec4 cc_debug_view_mode;\n#define texelSize cc_debug_view_mode\nvarying vec2 vUv;\nvarying vec2 vUvDown;\nvarying vec2 vUvUp;\nvarying vec2 vUvLeft;\nvarying vec2 vUvRight;\nvarying vec2 vUvDownLeft;\nvarying vec2 vUvUpRight;\nvarying vec2 vUvUpLeft;\nvarying vec2 vUvDownRight;\nvec4 vert() {\n  vUv = a_texCoord;\n  vUvDown = vUv + vec2(0.0, -1.0) * texelSize.xy;\n  vUvUp = vUv + vec2(0.0, 1.0) * texelSize.xy;\n  vUvRight = vUv + vec2(1.0, 0.0) * texelSize.xy;\n  vUvLeft = vUv + vec2(-1.0, 0.0) * texelSize.xy;\n  vUvDownLeft = vUv + vec2(-1.0, -1.0) * texelSize.xy;\n  vUvUpRight = vUv + vec2(1.0, 1.0) * texelSize.xy;\n  vUvUpLeft = vUv + vec2(-1.0, 1.0) * texelSize.xy;\n  vUvDownRight = vUv + vec2(1.0, -1.0) * texelSize.xy;\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_debug_view_mode;\n#define texelSize cc_debug_view_mode\nuniform sampler2D mainTexture;\n#define EDGE_THRESHOLD_MIN 0.0312\n#define EDGE_THRESHOLD_MAX 0.125\n#define SUBPIXEL_QUALITY 0.75\n#define SAMPLES 12\n#define QUALITY(q) ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\n#define ONE_OVER_TWELVE 0.08333333333333333\nvarying vec2 vUv;\nvarying vec2 vUvDown;\nvarying vec2 vUvUp;\nvarying vec2 vUvLeft;\nvarying vec2 vUvRight;\nvarying vec2 vUvDownLeft;\nvarying vec2 vUvUpRight;\nvarying vec2 vUvUpLeft;\nvarying vec2 vUvDownRight;\nfloat luminance(vec3 color) {\n  return dot(color, vec3( 0.2126729, 0.7151522, 0.0721750 ));\n}\nvec4 frag() {\n  vec2 uv = vUv;\n  vec4 inputColor = texture2D(mainTexture, vUv);\n  float lumaCenter = luminance(inputColor.rgb);\n  float lumaDown = luminance(texture2D(mainTexture, vUvDown).rgb);\n  float lumaUp = luminance(texture2D(mainTexture, vUvUp).rgb);\n  float lumaLeft = luminance(texture2D(mainTexture, vUvLeft).rgb);\n  float lumaRight = luminance(texture2D(mainTexture, vUvRight).rgb);\n  float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\n  float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\n  float lumaRange = lumaMax - lumaMin;\n  if(lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX)) {\n    return inputColor;\n  }\n  float lumaDownLeft = luminance(texture2D(mainTexture, vUvDownLeft).rgb);\n  float lumaUpRight = luminance(texture2D(mainTexture, vUvUpRight).rgb);\n  float lumaUpLeft = luminance(texture2D(mainTexture, vUvUpLeft).rgb);\n  float lumaDownRight = luminance(texture2D(mainTexture, vUvDownRight).rgb);\n  float lumaDownUp = lumaDown + lumaUp;\n  float lumaLeftRight = lumaLeft + lumaRight;\n  float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\n  float lumaDownCorners = lumaDownLeft + lumaDownRight;\n  float lumaRightCorners = lumaDownRight + lumaUpRight;\n  float lumaUpCorners = lumaUpRight + lumaUpLeft;\n  float edgeHorizontal = (\n    abs(-2.0 * lumaLeft + lumaLeftCorners) +\n    abs(-2.0 * lumaCenter + lumaDownUp ) * 2.0 +\n    abs(-2.0 * lumaRight + lumaRightCorners)\n  );\n  float edgeVertical = (\n    abs(-2.0 * lumaUp + lumaUpCorners) +\n    abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 +\n    abs(-2.0 * lumaDown + lumaDownCorners)\n  );\n  bool isHorizontal = (edgeHorizontal >= edgeVertical);\n  float stepLength = isHorizontal ? texelSize.y : texelSize.x;\n  float luma1 = isHorizontal ? lumaDown : lumaLeft;\n  float luma2 = isHorizontal ? lumaUp : lumaRight;\n  float gradient1 = abs(luma1 - lumaCenter);\n  float gradient2 = abs(luma2 - lumaCenter);\n  bool is1Steepest = gradient1 >= gradient2;\n  float gradientScaled = 0.25 * max(gradient1, gradient2);\n  float lumaLocalAverage = 0.0;\n  if(is1Steepest) {\n    stepLength = -stepLength;\n    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\n  } else {\n    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\n  }\n  vec2 currentUv = uv;\n  if(isHorizontal) {\n    currentUv.y += stepLength * 0.5;\n  } else {\n    currentUv.x += stepLength * 0.5;\n  }\n  vec2 offset = isHorizontal ? vec2(texelSize.x, 0.0) : vec2(0.0, texelSize.y);\n  vec2 uv1 = currentUv - offset * QUALITY(0);\n  vec2 uv2 = currentUv + offset * QUALITY(0);\n  float lumaEnd1 = luminance(texture2D(mainTexture, uv1).rgb);\n  float lumaEnd2 = luminance(texture2D(mainTexture, uv2).rgb);\n  lumaEnd1 -= lumaLocalAverage;\n  lumaEnd2 -= lumaLocalAverage;\n  bool reached1 = abs(lumaEnd1) >= gradientScaled;\n  bool reached2 = abs(lumaEnd2) >= gradientScaled;\n  bool reachedBoth = reached1 && reached2;\n  if(!reached1) {\n    uv1 -= offset * QUALITY(1);\n  }\n  if(!reached2) {\n    uv2 += offset * QUALITY(1);\n  }\n  if(!reachedBoth) {\n    for(int i = 2; i < SAMPLES; ++i) {\n      if(!reached1) {\n        lumaEnd1 = luminance(texture2D(mainTexture, uv1).rgb);\n        lumaEnd1 = lumaEnd1 - lumaLocalAverage;\n      }\n      if(!reached2) {\n        lumaEnd2 = luminance(texture2D(mainTexture, uv2).rgb);\n        lumaEnd2 = lumaEnd2 - lumaLocalAverage;\n      }\n      reached1 = abs(lumaEnd1) >= gradientScaled;\n      reached2 = abs(lumaEnd2) >= gradientScaled;\n      reachedBoth = reached1 && reached2;\n      if(!reached1) {\n        uv1 -= offset * QUALITY(i);\n      }\n      if(!reached2) {\n        uv2 += offset * QUALITY(i);\n      }\n      if(reachedBoth) {\n        break;\n      }\n    }\n  }\n  float distance1 = isHorizontal ? (uv.x - uv1.x) : (uv.y - uv1.y);\n  float distance2 = isHorizontal ? (uv2.x - uv.x) : (uv2.y - uv.y);\n  bool isDirection1 = distance1 < distance2;\n  float distanceFinal = min(distance1, distance2);\n  float edgeThickness = (distance1 + distance2);\n  bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\n  bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\n  bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\n  bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\n  float pixelOffset = -distanceFinal / edgeThickness + 0.5;\n  float finalOffset = correctVariation ? pixelOffset : 0.0;\n  float lumaAverage = ONE_OVER_TWELVE * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\n  float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\n  float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\n  float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\n  finalOffset = max(finalOffset, subPixelOffsetFinal);\n  vec2 finalUv = uv;\n  if(isHorizontal) {\n    finalUv.y += finalOffset * stepLength;\n  } else {\n    finalUv.x += finalOffset * stepLength;\n  }\n  return texture2D(mainTexture, finalUv);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"}]}],[{"passes":[{"pass":"fxaa","program":"../pipeline-next/materials/fxaa|fxaa-vs:vert|fxaa-fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false}}]}]]],0,0,[],[],[]],[[{"name":"warning","rect":{"x":0,"y":0,"width":555,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":555,"height":100},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-277.5,-50,0,277.5,-50,0,-277.5,50,0,277.5,50,0],"indexes":[0,1,2,2,1,3],"uv":[0,100,555,100,0,0,555,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-277.5,"y":-50,"z":0},"maxPos":{"x":277.5,"y":50,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[17],[30]],[[[11,"enemy01_Baked",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_PBR_MAP":true,"USE_LINEAR_COLOR":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true}],[[[{"roughness":0,"emissive":10},"emissiveColor",8,[4,4278190335],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2,"pbrMap",6,3,"normalMap",6,4]],11]]],0,0,[0,0,0,0,0,0],[6,8,13,9,11,3],[9,10,31,9,10,0]],[[[11,"EmissiveWhite",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"albedoScale",8,[1,3,3,3]]],11]]],0,0,[0],[3],[32]],[[[63,"game"],[50,"Scene","3dyZub3NdMNa/68S1jJP4D",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]],[64,"spaceship",1,[-14,-15,-16,-17,-18,-19,-20],[[78,-13,-12,-11,35,36,37]]],[12,0,{},1,[8,"98mPOjQ11eb4+jQZmGbttC",null,null,-25,[43,"17K+Mp56ZHlYwkaOtATi5k",null,[[54,[1,["98mPOjQ11eb4+jQZmGbttC"]],[-23,-24]]],[[9,"building01",["_name"],[1,["98mPOjQ11eb4+jQZmGbttC"]]],[3,["_lpos"],[1,["98mPOjQ11eb4+jQZmGbttC"]],[1,0,0,-2.5]],[3,["_lrot"],[1,["98mPOjQ11eb4+jQZmGbttC"]],[3,0,0,0,1]],[3,["_euler"],[1,["98mPOjQ11eb4+jQZmGbttC"]],[1,0,0,0]],[9,true,["_active"],[1,["98mPOjQ11eb4+jQZmGbttC"]]],[9,1073741824,["_layer"],[1,["98mPOjQ11eb4+jQZmGbttC"]]],[2,["_lpos"],-21,[1,0,-1,0]],[4,true,["_active"],-22]]],5]],[65,"Group",33554432,[-29,-30,-31],[[82,-26],[83,1,20,-27],[85,-28]],[1,0,290,0]],[1,["7drPHv2eNbg45hVAv5el/M"]],[50,"Managers","b7PIccNIxI0rnZ93f24toL",[-32,-33,-34,-35,-36,-37]],[66,"Main Camera","2bCW4IcqNOIJIdjCTZweGO",[-42],[[90,0.1,100,14,1082130433,-38,[4,4278190080]],[92,true,true,true,true,true,-39,[93,0.1,100],[94,1.88,1.3],[1,-21.886,0.36,68]],[95,-40,[96,2],[97,1],[98,false,3],[99,4]],[100,"gameStart",-41]],[1,-21.941014723012827,0.5935801657984087,8.799517898560538],[3,-0.13264516987939,-0.036597418169334636,-0.004901151394301066,0.9904755759765188],[1,-15.255411800197942,-4.232157111824299,9.93923337957349e-17]],[12,0,{},1,[8,"eaU1pGwtxbJZCKfoxh2CHq",null,null,-51,[43,"90X0SeQmBFAJU8q+iYuOHg",null,[[54,[1,["eaU1pGwtxbJZCKfoxh2CHq"]],[-50]]],[[4,"enemy01",["_name"],-43],[2,["_lpos"],-44,[1,-3.136,0.009,1.878]],[2,["_lrot"],-45,[3,0,0,0,1]],[2,["_euler"],-46,[1,0,0,0]],[4,0,["bakeSettings","_reflectionProbeType"],-47],[4,0,["_reflectionProbeId"],-48],[3,["_lpos"],[1,["83bJrAS+daepCtxB5EvKLb"]],[1,0,0,0]],[4,true,["_active"],-49]]],38]],[67,"Canvas",33554432,"00iWHbzzZM94D4t+bkG/jX",[-56,4],[[28,-52,[5,1280,720]],[101,-54,-53],[84,45,-55]],[1,640,360,0]],[68,"Life",33554432,4,[-61,-62],[[28,-57,[5,500,13]],[86,1,0,-58,54],[102,476,0.05,-60,-59]]],[103,"game",[7,1,9,6],[79,null,null,"51b44da9-de30-4fea-9cf2-4451b3902907",null,null,[3,-63,-64,-65,-66,8,-67,-68,-69,-70,-71,-72]],[104,[105,0.8,[2,0.2,0.5,0.8,0.520833125],[2,0.452588,0.607642,0.755699,0],[2,0.618555,0.577848,0.544564,0]],[106,1,[4,4283190348],[0,2048,2048]],[107,1,60,61,62],[108,1,true,5,10,10,[4,4285224253]],[109],[110,false],[111],[112]]],[12,0,{},2,[8,"2bwY6wKnheYJw63pDndVho",null,null,-82,[80,"f7LCKKzABAUp0d4sa0mBPF",null,[[113,[1,["2bwY6wKnheYJw63pDndVho"]],[[114,-81]]]],[[4,"spaceship_simple_4",["_name"],-73],[2,["_lpos"],-74,[1,0,0,0]],[2,["_lrot"],-75,[3,0,0,0,1]],[2,["_euler"],-76,[1,0,0,0]],[2,["_lrot"],-77,[3,0,-0.7071067811865475,0,0.7071067811865476]],[2,["_euler"],-78,[1,0,-90,0]],[44,["_materials","0"],-79,25],[44,["_mesh"],-80,26]]],24]],[1,["4ccWxKKKBeTY5Hc4wa0ODG"]],[1,["eaU1pGwtxbJZCKfoxh2CHq"]],[1,["38Ah3rkhZacoJ4kJ19ewmf"]],[1,["fdAP+mAANS94cCeHREihrS"]],[1,["efL4jq/xBToaTcYLNSl81s"]],[1,["75OH9GQ5NRer7poEAHqiQn"]],[1,["2bwY6wKnheYJw63pDndVho"]],[77,"ParticleGet",2,[-84],[-83],[3,0,-0.7071067811865475,0,0.7071067811865477],[1,0,-89.99999999999999,0]],[41,0,8,[8,"4ccWxKKKBeTY5Hc4wa0ODG",null,null,-86,[43,"32q1efpBxKvb2WXd0Od/1j",null,[[81,[1,["4ccWxKKKBeTY5Hc4wa0ODG"]],[[69,"end",-85,[1,0,0,-1]]]]],[[4,"lightline",["_name"],13],[2,["_lpos"],13,[1,0,0,0]],[2,["_lrot"],13,[3,0,0,0,1]],[2,["_euler"],13,[1,0,0,0]],[3,["_lscale"],[1,["7dzmr2osVQ6oFch/8Kzzwm"]],[1,0.02,0.02,1]],[2,["_lscale"],13,[1,1,1,100]],[27,["_materials","0"],[1,["2dGVDhZbpWwoM0juMXDrOV"]],40]]],39],[{},"mountedRoot",1,8]],[12,0,{},1,[8,"38Ah3rkhZacoJ4kJ19ewmf",null,null,-90,[17,"15rxQAdUZJMajMaRYZraqp",null,[[4,"cybercar01",["_name"],15],[2,["_lpos"],15,[1,-5.37,0,1.604]],[2,["_lrot"],15,[3,0,0,0,1]],[2,["_euler"],15,[1,0,0,0]],[4,true,["_active"],15],[2,["_lrot"],-87,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],-88,[1,0,180,0]],[2,["_lpos"],-89,[1,0,-0.063,0.078]]]],41]],[12,0,{},1,[8,"aclOpSjwJZJoVjeCbYyl+x",null,null,-93,[17,"75DLM4puVOY4RiBJkP7LiV",null,[[9,"cybercar02",["_name"],[1,["aclOpSjwJZJoVjeCbYyl+x"]]],[3,["_lpos"],[1,["aclOpSjwJZJoVjeCbYyl+x"]],[1,-4.775,0,1.616]],[3,["_lrot"],[1,["aclOpSjwJZJoVjeCbYyl+x"]],[3,0,0,0,1]],[3,["_euler"],[1,["aclOpSjwJZJoVjeCbYyl+x"]],[1,0,0,0]],[9,true,["_active"],[1,["aclOpSjwJZJoVjeCbYyl+x"]]],[3,["_lrot"],[1,["5chsNeAC1fLY2VvITuDCRG"]],[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],-91,[1,0,180,0]],[2,["_lpos"],-92,[1,0,-0.195,0]]]],42]],[12,0,{},1,[8,"fdAP+mAANS94cCeHREihrS",null,null,-100,[17,"fahzRQRT5FOYyH14F0pYk0",null,[[4,"building01_box",["_name"],16],[2,["_lpos"],16,[1,0,-19.034,0]],[2,["_lrot"],16,[3,0,0,0,1]],[2,["_euler"],16,[1,0,0,0]],[4,true,["_enabled"],-94],[4,1048576,["_layer"],-95],[4,1073741824,["_layer"],16],[44,["_materials","0"],-96,44],[4,0,["_materials","length"],-97],[2,["_lscale"],-98,[1,1,1,1]],[2,["_lpos"],-99,[1,0,-1,0]]]],43]],[12,0,{},1,[8,"efL4jq/xBToaTcYLNSl81s",null,null,-101,[17,"9daydExElLebYuSBMxc2Sd",null,[[4,"bottom",["_name"],17],[2,["_lpos"],17,[1,-4.332,-4.366,0]],[2,["_lrot"],17,[3,0,0,0,1]],[2,["_euler"],17,[1,0,0,0]],[2,["_lscale"],17,[1,1,1,1]],[2,["_lpos"],18,[1,0,-0.355,0]],[2,["_lscale"],18,[1,0.3,0.3,0.3]],[2,["_lrot"],18,[3,0,-0.07758909147106598,0,0.9969854226039088]],[2,["_euler"],18,[1,0,-8.9,0]],[4,true,["_active"],18]]],45]],[12,0,{},1,[8,"06zvl2jNdTIpheZmdttO9g",null,null,-106,[17,"dff5RrhM9OJYGrEEcl9CNV",null,[[9,"longbox",["_name"],[1,["06zvl2jNdTIpheZmdttO9g"]]],[3,["_lpos"],[1,["06zvl2jNdTIpheZmdttO9g"]],[1,-12.394,0,0]],[3,["_lrot"],[1,["06zvl2jNdTIpheZmdttO9g"]],[3,0,0,0,1]],[2,["_euler"],-102,[1,0,0,0]],[2,["_lscale"],-103,[1,1,1,1]],[2,["_lpos"],-104,[1,3.012,0.02,0]],[2,["_lscale"],-105,[1,2,1.7,1.3]]]],47]],[53,"Sprite",33554432,4,[[[28,-107,[5,222,40]],[87,0,-108,[4,16777215],55],-109],4,4,1],[1,0,-30,0]],[41,0,3,[8,"7drPHv2eNbg45hVAv5el/M",null,null,-110,[17,"5cLczhajBCkqvpXfRMIUjG",null,[[4,"arrow",["_name"],5],[2,["_lpos"],5,[1,-0.792,0.615,1.587]],[2,["_lrot"],5,[3,0,0,0,1]],[2,["_euler"],5,[1,0,0,0]],[4,false,["_active"],5],[2,["_lscale"],5,[1,2,2,1]],[4,1073741824,["_layer"],5],[9,1073741824,["_layer"],[1,["76E+O6+ANX+45GaZ/yK7Kp"]]]]],6],[{},"mountedRoot",1,3]],[41,0,3,[8,"7drPHv2eNbg45hVAv5el/M",null,null,-113,[17,"d3eEL3EShK1a2UvzSS5DEW",null,[[9,"arrow-001",["_name"],[1,["7drPHv2eNbg45hVAv5el/M"]]],[3,["_lpos"],[1,["7drPHv2eNbg45hVAv5el/M"]],[1,-2.417,2.009,-0.478]],[3,["_lrot"],[1,["7drPHv2eNbg45hVAv5el/M"]],[3,-0.21296500124316442,-0.6585613609436286,-0.20244266573044242,0.692791317215745]],[3,["_euler"],[1,["7drPHv2eNbg45hVAv5el/M"]],[1,-34.175,-87.09799999999998,-6.3611093629270335e-15]],[9,false,["_active"],[1,["7drPHv2eNbg45hVAv5el/M"]]],[2,["_lscale"],-111,[1,2,2,1]],[4,1073741824,["_layer"],-112],[9,1073741824,["_layer"],[1,["76E+O6+ANX+45GaZ/yK7Kp"]]]]],7],[{},"mountedRoot",1,3]],[12,0,{},2,[8,"70nnqjvkFfGKFpqGjtVZwP",null,null,-114,[17,"54WaK0VspI1Zj1aDVr+GDa",null,[[9,"weiyan",["_name"],[1,["70nnqjvkFfGKFpqGjtVZwP"]]],[3,["_lpos"],[1,["70nnqjvkFfGKFpqGjtVZwP"]],[1,0.029,0,0]],[3,["_lrot"],[1,["70nnqjvkFfGKFpqGjtVZwP"]],[3,0,1,0,6.123233995736766e-17]],[3,["_euler"],[1,["70nnqjvkFfGKFpqGjtVZwP"]],[1,0,180,0]],[9,2,["_materials","length"],[1,["e65KNUkhtWVIJg2gPQInkl"]]],[27,["_materials","0"],[1,["e65KNUkhtWVIJg2gPQInkl"]],13],[27,["_materials","1"],[1,["e65KNUkhtWVIJg2gPQInkl"]],14],[3,["_lrot"],[1,["e6HZs+T3lctJxMVdW5XLLA"]],[3,0,0,0,1]],[3,["_euler"],[1,["e6HZs+T3lctJxMVdW5XLLA"]],[1,0,0,0]],[3,["_lpos"],[1,["e6HZs+T3lctJxMVdW5XLLA"]],[1,0.005,0,0]],[3,["_lscale"],[1,["70nnqjvkFfGKFpqGjtVZwP"]],[1,1,1,1]],[27,["_mesh"],[1,["e65KNUkhtWVIJg2gPQInkl"]],15]]],12]],[56,1,1,[16,17],[21],[0],[0],[0],[0],[0],[0],[0],[0],[6,20],[0],[0],[0],[[31,[6,1]]],[32,true,[29,1,[33,[[34,0],[18,255,0.01],[18,255,0.99],[18,0,1]]]]],[57,0,[6,1]],[45,[0],[0],[0],[0]],[35,[0],[0],[0],[6,1]],[46,[0],[0],[0]],[58,[0],[0],[0],[0]],[36,[0],[0],[0]],[37,[30,1,[38,[0,1],[[24,2,1],[24,2,1]]]],[0]],[47],[60,true,0.01,false,true,[6,1],[6,0.002],[22,[4,1358954495]],[22,[4,1358954495]],-115],[61,18,19]],[56,1,1,[20,21],[21],[0],[0],[0],[0],[0],[0],[0],[0],[6,20],[0],[0],[0],[[31,[6,1]]],[32,true,[29,1,[33,[[34,0],[18,255,0.01],[18,255,0.99],[18,0,1]]]]],[57,0,[6,1]],[45,[0],[0],[0],[0]],[35,[0],[0],[0],[6,1]],[46,[0],[0],[0]],[58,[0],[0],[0],[0]],[36,[0],[0],[0]],[37,[30,1,[38,[0,1],[[24,2,1],[24,2,1]]]],[0]],[47],[60,true,0.01,false,true,[6,1],[6,0.002],[22,[4,1358757116]],[22,[4,1358954495]],-116],[61,22,23]],[1,["a4VAOoy8Vdy6lbugOC3r4Z"]],[1,["ddoKYRHWZZ1oytvgjYwzbn"]],[1,["01J9OlUQFWFpFK5cJM8bOh"]],[70,"longbox_box",1048576,1,[-117],[1,-12.394,0,0]],[40,"battery",1,[-118],[1,-3.845,0,0.37]],[71,"box",37,[-119,-120],[1,1.5,1.5,1.5]],[51,"Score",33554432,4,[[28,-121,[5,139.58,40]],[128,"123,789",30,30,false,5,-122,52]],[1,0,28.759,0]],[51,"preBar",33554432,10,[[55,-123,[5,476,7],[0,0,0.5]],[88,1,0,-124,[4,4294957190],53]],[1,-238,0,0]],[53,"Bar",33554432,10,[[[55,-125,[5,23.8,7],[0,0,0.5]],-126],4,1],[1,-238,0,0]],[72,"skybox",7,[[48,"Cube<ModelComponent>",-127,[0],[7],1]],[1,21.232,0,-6.658],[3,0.13264516624968972,0.03659741815137385,0.004901151528416093,0.9904755764626108],[1,100.00000000000001,100,100],[1,15.215744,4.083540034744903,1.1126326709667]],[1,["7drPHv2eNbg45hVAv5el/M"]],[1,["e103YCGopRGoxEZ7c3/fCj"]],[73,"spaceship",2,[[129,0,-128,[8],[7],9]],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[74,"lensflare",2,[[48,"Quad<ModelComponent>",-129,[10],[7],11]],[1,-0.198,0.025,-0.001]],[40,"tail0",2,[-130],[1,0.06,0.026,-0.241]],[42,"Particle",47,[31],[1,-0.03,0,0]],[40,"tail1",2,[-131],[1,0.06,0.026,0.241]],[42,"Particle",49,[32],[1,-0.03,0,0]],[1,["55pwAfIZpb8bQydl9xqvfo"]],[1,["f3FElzRJ1aH7LoPwP/s3SV"]],[16,"Node",20,[[115,1,false,false,-132,[27],[22,[4,493049131]],[23,3,0.002,0.03],[0],[0],[6,1],[0],[0],[0],[0],[23,3,0.5,2],[0],[0],[0],[[31,[6,10]]],[32,true,[29,1,[33,[[34,255],[18,0,1]]]]],[117,true,3,0.1,[0]],[45,[0],[0],[0],[0]],[35,[0],[0],[0],[6,1]],[46,[0],[0],[0]],[59,true,0.1,[0],[0],[0],[0]],[36,[0],[0],[0]],[37,[0],[0]],[47],[124,[0],[0],[21],[21]],[126,28,29,30]]]],[116,1,false,false,20,[[31,null],6,0],[22,[4,4294942995]],[23,3,0.005,0.01],[0],[0],[23,3,2,5],[0],[0],[0],[0],[23,3,0.2,1],[0],[0],[0],[[31,[23,3,25,50]]],[32,true,[29,1,[33,[[34,255],[18,0,1]]]]],[118,true,3,0.1,0,[6,1]],[119,true,[30,1,[38,[0,1],[[121,2,1,0.3333333333333333],[122,2,0.3333333333333333]]]],[0],[0],[0]],[35,[0],[0],[0],[6,1]],[120,2,[0],[0],[0]],[59,true,0.1,[0],[0],[0],[0]],[36,[0],[0],[0]],[37,[30,1,[38,[0,1],[[24,2,1],[24,2,1]]]],[0]],[123,0,30,0,25,22,22,0.001],[125,[6,1],[0],[21],[21],-133],[127,1,0.07,1,32,33,34]],[1,["4aP8lvZS5Z/p1GbaPtUF8D"]],[1,["5chsNeAC1fLY2VvITuDCRG"]],[75,"Cube",1048576,36,[[131,"Cube<ModelComponent>",[null],-134,[7],46]],[1,3,0.035,0],[1,1.3,0.8,10]],[1,["06zvl2jNdTIpheZmdttO9g"]],[1,["6aenJRl9tT/Jel3piPZhUt"]],[76,"in",38,[[130,-135,[48],[7],49]],[1,-0.019,0,0],[3,0.1305261922200517,0,0,0.9914448613738104],[1,15.000000000000014,0,0]],[16,"out",38,[[48,"Quad<ModelComponent>",-136,[50],[7],51]]],[42,"Camera",9,[-137],[1,0,0,1000]],[91,0,1073741824,430.7045215562566,2000,6,41943040,62,[4,4278190080]],[89,1,0,41],[133,27,[56]],[16,"GameManager",6,[[134,-138,4]]],[16,"SceneManager",6,[[135,-139,3,24,26,36,25,[22,23]]]],[16,"EnemyManager",6,[[136,-140,8,65,57,58]]],[16,"PropsManager",6,[[137,-141,37]]],[16,"EffectManager",6,[[138,-142,59]]],[16,"ParticleManager",6,[[139,-143,20,12]]]],0,[0,-1,3,0,-2,2,0,-3,8,0,-4,22,0,-5,23,0,-6,24,0,-7,25,0,-8,36,0,-9,26,0,-10,37,0,22,32,0,23,31,0,0,2,0,-1,45,0,-2,46,0,-3,30,0,-4,47,0,-5,49,0,-6,12,0,-7,20,0,1,44,0,1,44,0,-1,28,0,-2,29,0,2,3,0,0,4,0,0,4,0,0,4,0,-1,39,0,-2,10,0,-3,27,0,-1,66,0,-2,67,0,-3,68,0,-4,69,0,-5,70,0,-6,71,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,42,0,1,14,0,1,14,0,1,14,0,1,14,0,1,55,0,1,55,0,1,14,0,-1,21,0,2,8,0,0,9,0,24,63,0,0,9,0,0,9,0,-1,62,0,0,10,0,0,10,0,25,64,0,0,10,0,-1,40,0,-2,41,0,-2,28,0,-3,29,0,-4,30,0,-5,12,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-12,26,0,1,19,0,1,19,0,1,19,0,1,19,0,1,51,0,1,51,0,1,52,0,1,52,0,0,12,0,2,12,0,-1,54,0,-1,53,0,12,21,0,2,21,0,1,33,0,1,33,0,1,33,0,2,22,0,1,56,0,1,56,0,2,23,0,1,34,0,1,35,0,1,34,0,1,34,0,1,35,0,1,35,0,2,24,0,2,25,0,1,58,0,1,58,0,1,59,0,1,59,0,2,26,0,0,27,0,0,27,0,-3,65,0,2,28,0,1,43,0,1,43,0,2,29,0,2,30,0,18,31,0,18,32,0,-1,57,0,-1,38,0,-1,60,0,-2,61,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,-2,64,0,0,42,0,0,45,0,0,46,0,-1,48,0,-1,50,0,0,53,0,18,54,0,0,57,0,0,60,0,0,61,0,-1,63,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,26,11,1,12,11,4,12,9,6,12,11,7,12,11,9,12,11,31,0,48,32,0,50,143],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65],[-1,4,19,19,19,5,5,5,-1,4,-1,4,5,10,10,10,-1,-2,14,15,-1,-2,14,15,5,10,10,-1,14,20,15,-1,14,20,15,27,28,29,5,5,10,5,5,5,10,5,4,5,-1,4,-1,4,30,16,16,16,-1,31,32,33,34,35,36,16,37],[33,11,12,34,35,36,13,13,14,37,15,16,38,3,4,17,2,18,2,1,2,18,2,1,39,40,41,5,5,5,42,6,6,6,1,15,3,4,43,44,19,45,46,47,12,48,11,49,50,51,52,16,53,20,54,55,21,19,22,14,56,57,58,20,21]],[[[14,"arrow"],[13,"arrow",[-2],[5,"7drPHv2eNbg45hVAv5el/M",null,null,null,-1,0]],[20,"Plane.002",1,[[19,-3,[15,"4a6qwsHFlWb5rayszmTUls"],[0],[7],1]],[5,"76E+O6+ANX+45GaZ/yK7Kp",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0],[-1,4],[59,60]],[[[26,".bin",13301149,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":96,"count":48,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3421664237976074,-0.14278210699558258,-1.508691127583006e-8],"maxPosition",8,[1,0.3451482951641083,0.14278210699558258,1.508691127583006e-8]]],-1],0,0,[],[],[]],[[[25,"meshparticle",3,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_PARTICLE":true,"USE_PARTICLE2":true,"USE_SWEEP_LIGHT":true}],[[[{"metallic":0.98,"occlusion":0},"mainColor",8,[4,4294947408],"noiseMap",6,0]],11]]],0,0,[0,0],[21,3],[23,0]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@e9a6d","back":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@40c10","left":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@8fd34","right":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@74afd","top":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@bb97f","bottom":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@7d38f"}]}],[15],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[25,"lensflare",3,[{"rasterizerState":{},"depthStencilState":{"depthFunc":7},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,905969663],"albedoScale",8,[1,2,2,3.5],"size",8,[0,0.8,0.4],"mainTexture",6,0]],11]]],0,0,[0,0],[6,3],[61,62]],[[[11,"PerfPanelsDark",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_NORMAL_MAP":true,"USE_OCCLUSION_MAP":true,"OCCLUSION_UV":"v_uv1","USE_DITHER_DISCARD":true}],[[[{"roughness":0.5958549380302429,"metallic":0.81},"mainColor",8,[4,4293388263],"albedoScale",8,[1,0.09094125032424927,0.09094125032424927,0.09094125032424927],"occlusionMap",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[8,11,3],[7,63,0]],[[[11,"SM_RaisedCityTest1.001_Baked",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_PBR_MAP":true,"USE_EMISSIVE_MAP":true}],[[[{"occlusion":0,"emissive":5},"emissiveColor",8,[4,4294967295],"mainTexture",6,0,"emissiveMap",6,1,"pbrMap",6,2]],11]]],0,0,[0,0,0,0],[6,13,9,3],[64,65,66,0]],[[[14,"weiyan"],[13,"weiyan",[-2],[5,"70nnqjvkFfGKFpqGjtVZwP",null,null,null,-1,0]],[20,"weiyan",1,[[19,-3,[15,"e65KNUkhtWVIJg2gPQInkl"],[0,1],[7],2]],[5,"e6HZs+T3lctJxMVdW5XLLA",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0,0],[-1,-2,4],[4,3,17]],[[[10,".bin",436648968,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16160,"length":1267,"count":1632,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":17428,"length":1267,"count":1632,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8102,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":8112,"length":8045,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}],"minPosition":{"x":0.2176842838525772,"y":0.012193084694445133,"z":-0.014885983429849148},"maxPosition":{"x":0.318590372800827,"y":0.041766803711652756,"z":0.014623955823481083}}],-1],0,0,[],[],[]],[[[14,"longbox"],[13,"longbox",[-2],[5,"06zvl2jNdTIpheZmdttO9g",null,null,null,-1,0]],[20,"SM_RaisedCityTest1.001_Baked",1,[[19,-3,[15,"820oGyr+hVtbWS1zmaP7Ob"],[0],[7],1]],[5,"6aenJRl9tT/Jel3piPZhUt",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0],[-1,4],[67,68]],[[[10,".bin",3296291800,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":108040,"length":8159,"count":6552,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":108037,"count":3104,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}],"minPosition":{"x":-0.30391427874565125,"y":-0.1926756501197815,"z":-3.984755039215088},"maxPosition":{"x":0.28636929392814636,"y":0.2185802012681961,"z":4.061110973358154}}],-1],0,0,[],[],[]],[[[49,"fxaaMaterial",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[3],[69]],[[{"name":"progressbar","rect":{"x":0,"y":0,"width":429,"height":14},"offset":{"x":-0.5,"y":0},"originalSize":{"width":430,"height":14},"rotated":false,"capInsets":[14,0,14,0],"vertices":{"rawPosition":[-214.5,-7,0,214.5,-7,0,-214.5,7,0,214.5,7,0],"indexes":[0,1,2,2,1,3],"uv":[0,14,429,14,0,0,429,0],"nuv":[0,0,0.9976744186046511,0,0,1,0.9976744186046511,1],"minPos":{"x":-214.5,"y":-7,"z":0},"maxPos":{"x":214.5,"y":7,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[17],[70]],[[[14,"cybercar02"],[13,"cybercar02",[-2],[5,"aclOpSjwJZJoVjeCbYyl+x",null,null,null,-1,0]],[20,"CAR_LOW2_Baked",1,[[19,-3,[15,"779/Ec7/haiao4KKifpEhp"],[0],[7],1]],[5,"5chsNeAC1fLY2VvITuDCRG",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0],[-1,4],[71,72]],[[[10,".bin",4280594905,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":90176,"length":7540,"count":8253,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":90173,"count":2641,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}],"minPosition":{"x":-0.2462519407272339,"y":-0.010181725025177002,"z":-0.7230330109596252},"maxPosition":{"x":0.24625174701213837,"y":0.46683213114738464,"z":0.44298508763313293}}],-1],0,0,[],[],[]],[[[25,"weiyan02",1,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{"lightNoiseFlow":16},"mainColorIn",8,[4,4294921533],"mainColorOut",8,[4,4294909696],"colorStep",8,[0,0,1],"lightNoiseTiling",8,[0,3,5],"lightNoiseStep",8,[0,0,1],"coreLightStep",8,[0,0,0.1]]],11]]],0,0,[0],[3],[24]],[[[26,".bin",1984298902,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1704,"count":852,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.008458564057946205,-0.04248036816716194,-0.02309725619852543],"maxPosition",8,[1,0.008458564057946205,0.04248036444187164,0.02309725619852543]]],-1],0,0,[],[],[]],[[[10,".bin",4067911652,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":157608,"length":12679,"count":9519,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":157608,"count":4105,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"minPosition":{"x":-2.6355643272399902,"y":-27.48217010498047,"z":-17.958036422729492},"maxPosition":{"x":2.6355643272399902,"y":0.8619351983070374,"z":2.9160165786743164}}],-1],0,0,[],[],[]],[[[14,"bottom"],[13,"bottom",[-2],[5,"efL4jq/xBToaTcYLNSl81s",null,null,null,-1,0]],[52,"Circle.008_B",1,[[19,-3,[15,"9aTSPKDuxcCK+g4QOCB55b"],[0],[7],1]],[5,"75OH9GQ5NRer7poEAHqiQn",null,null,null,1,0],[1,0.23767153918743134,0.23767153918743134,0.23767153918743134]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0],[-1,4],[73,74]],[[[25,"weiyan01",1,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{"lightNoiseFlow":16,"intensity":0.89},"mainColorIn",8,[4,4294932992],"mainColorOut",8,[4,4294925312],"colorStep",8,[0,0,1],"lightNoiseTiling",8,[0,3,5],"lightNoiseStep",8,[0,0,1]]],11]]],0,0,[0],[3],[24]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"bdQ+EleLdOmZ/XQJRbnkNN@b47c0@e9a6d","back":"bdQ+EleLdOmZ/XQJRbnkNN@b47c0@40c10","left":"bdQ+EleLdOmZ/XQJRbnkNN@b47c0@8fd34","right":"bdQ+EleLdOmZ/XQJRbnkNN@b47c0@74afd","top":"bdQ+EleLdOmZ/XQJRbnkNN@b47c0@bb97f","bottom":"bdQ+EleLdOmZ/XQJRbnkNN@b47c0@7d38f"}]}],[15],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[49,"baseMaterial",[{},{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}]]],0,0,[0],[3],[75]],[[[14,"cybercar01"],[13,"cybercar01",[-2],[5,"38Ah3rkhZacoJ4kJ19ewmf",null,null,null,-1,0]],[20,"CAR_LOW1_Baked",1,[[19,-3,[15,"febl/z5rBfIY0B10Ot+vUw"],[0],[7],1]],[5,"a4VAOoy8Vdy6lbugOC3r4Z",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0],[-1,4],[76,77]],[[[10,".bin",1860750929,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":61196,"length":5713,"count":6378,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":61193,"count":1736,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}],"minPosition":{"x":-0.17413073778152466,"y":-0.003947637043893337,"z":-0.3332364559173584},"maxPosition":{"x":0.1741308867931366,"y":0.1682692915201187,"z":0.4321121871471405}}],-1],0,0,[],[],[]],[[[14,"building01_box"],[13,"building01_box",[-2],[5,"fdAP+mAANS94cCeHREihrS",null,null,null,-1,0]],[20,"building01_box",1,[[132,[null],-3,[15,"ddoKYRHWZZ1oytvgjYwzbn"],[7],0]],[5,"01J9OlUQFWFpFK5cJM8bOh",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0],[4],[78]],[[[10,".bin",3511579808,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2496,"length":341,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2496,"count":164,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}],"minPosition":{"x":-2.7517669200897217,"y":-7.064727783203125,"z":-1.6127827167510986},"maxPosition":{"x":1.5931872129440308,"y":9.706735610961914,"z":1.3952375650405884}}],-1],0,0,[],[],[]],[[[10,".bin",2483556730,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":416516,"length":290,"count":216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":416808,"length":648,"count":507,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":417456,"length":21689,"count":18735,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":439148,"length":379,"count":312,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4149,"count":124,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":4200,"length":7730,"count":216,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":11984,"length":400007,"count":10750,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":411992,"length":4522,"count":208,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"minPosition":{"x":-2.7274229526519775,"y":-7.02869987487793,"z":-1.7078659534454346},"maxPosition":{"x":1.6109063625335693,"y":9.65056037902832,"z":1.4744601249694824}}],-1],0,0,[],[],[]],[[[14,"building01"],[13,"building01",[-2],[5,"98mPOjQ11eb4+jQZmGbttC",null,null,null,-1,0]],[20,"building01.low.instance",1,[[19,-3,[15,"c0ZI4i6GFan6LTdvBVzGwV"],[0,1,2,3],[7],4]],[5,"e103YCGopRGoxEZ7c3/fCj",null,null,null,1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0,0,0,0],[-1,-2,-3,-4,4],[79,80,81,82,83]],[[[10,".bin",3711396879,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1236532,"length":127478,"count":96813,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1236531,"count":39652,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}],"minPosition":{"x":-0.24295364320278168,"y":-0.1081390380859375,"z":-0.21322762966156006},"maxPosition":{"x":0.24295365810394287,"y":0.1081390380859375,"z":0.21322761476039886}}],-1],0,0,[],[],[]],[[{"name":"progressbg","rect":{"x":0,"y":0,"width":1112,"height":26},"offset":{"x":0,"y":0},"originalSize":{"width":1112,"height":26},"rotated":false,"capInsets":[24,0,24,0],"vertices":{"rawPosition":[-556,-13,0,556,-13,0,-556,13,0,556,13,0],"indexes":[0,1,2,2,1,3],"uv":[0,26,1112,26,0,0,1112,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-556,"y":-13,"z":0},"maxPos":{"x":556,"y":13,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[17],[84]],[[[11,"Circle.008_Baked",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_PBR_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{}],[[[{"metallic":0.7,"occlusion":0,"emissive":5},"mainColor",8,[4,4287730065],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2,"pbrMap",6,3],{}],11,0]]],0,0,[0,0,0,0,0],[6,8,13,9,3],[85,25,86,25,0]],[[[62,"particle-add",[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,3],[1,87]],[[[39,"../materials/flame",[{"hash":2579517013,"name":"../materials/flame|flame-vs:vert|flame-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColorIn","type":16,"count":1},{"name":"mainColorOut","type":16,"count":1},{"name":"mainColorParams","type":16,"count":1},{"name":"lightNoiseParams","type":16,"count":1},{"name":"lightNoiseParams2","type":16,"count":1},{"name":"coreLightParams","type":16,"count":1},{"name":"controlParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColorIn","type":16,"count":1},{"name":"mainColorOut","type":16,"count":1},{"name":"mainColorParams","type":16,"count":1},{"name":"lightNoiseParams","type":16,"count":1},{"name":"lightNoiseParams2","type":16,"count":1},{"name":"coreLightParams","type":16,"count":1},{"name":"controlParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nvec2 random2( vec2 p ) {\n    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat noise2d( in vec2 p ) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3 n = h*h*h*h*vec3( dot(a,random2(i+0.0)), dot(b,random2(i+o)), dot(c,random2(i+1.0)));\n    return dot(n, vec3(70.0));\n}\nout vec2 v_uv;\nout vec3 v_view;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nvec4 vert() {\n  StandardVertInput In;\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_uv = a_texCoord;\n  float offset = noise2d(v_uv * vec2(5.0, 10.0) - 16.0 * cc_time.x) * 0.00125;\n  In.position.xyz += In.normal * offset;\n  In.position.x += v_uv.x * (noise2d(v_uv - 16.0 * cc_time.x) * 0.5 + 0.5) * 0.025;\n  vec4 worldPos = matWorld * In.position;\n  v_view = cc_cameraPos.xyz - worldPos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  return cc_matViewProj * worldPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec2 random2( vec2 p ) {\n    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat noise2d( in vec2 p ) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3 n = h*h*h*h*vec3( dot(a,random2(i+0.0)), dot(b,random2(i+o)), dot(c,random2(i+1.0)));\n    return dot(n, vec3(70.0));\n}\nin vec2 v_uv;\nin vec3 v_view;\nin vec3 v_normal;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColorIn;\n  vec4 mainColorOut;\n  vec4 mainColorParams;\n  vec4 lightNoiseParams;\n  vec4 lightNoiseParams2;\n  vec4 coreLightParams;\n  vec4 controlParams;\n};\n#define saturate(a) clamp(a, 0.0, 1.0)\n#define u_colorStep         mainColorParams.xy\n#define u_colorExp          mainColorParams.z\n#define u_lightNoiseTiling  lightNoiseParams.xy\n#define u_lightNoiseFlow    lightNoiseParams.z\n#define u_lightNoiseExp     lightNoiseParams.w\n#define u_lightNoiseStep    lightNoiseParams2.xy\n#define u_coreLightStep     coreLightParams.xy\n#define u_coreLightExp      coreLightParams.z\n#define u_fresnelPower      lightNoiseParams2.z\n#define u_fresnelExp        lightNoiseParams2.w\n#define u_intensity         coreLightParams.w\nvec4 frag () {\n  vec4  color = mix(mainColorOut, mainColorIn, smoothstep(u_colorStep.y, u_colorStep.x, v_uv.x));\n  float noise = noise2d(v_uv.xy * u_lightNoiseTiling - vec2(u_lightNoiseFlow * cc_time.x, 0.0)) * 0.5 + 0.5;;\n  noise *= smoothstep(u_lightNoiseStep.y, u_lightNoiseStep.x, v_uv.x);\n  noise = saturate(noise);\n  float core = smoothstep(u_coreLightStep.y, u_coreLightStep.x, v_uv.x);\n  core = saturate(core);\n  float alpha = saturate(noise + core);\n  vec3 f = vec3(-1.,0.,0.);\n  vec3 v = normalize(v_view);\n  vec3 n = normalize(v_normal);\n  float VoN = abs(dot(n, v));\n  alpha *= VoN;\n  alpha*=smoothstep(1.-u_intensity,1.,1.-v_uv.x);\n  color.rgb*=u_intensity;\n  return vec4(color.rgb * 3., alpha);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nvec2 random2( vec2 p ) {\n    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat noise2d( in vec2 p ) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3 n = h*h*h*h*vec3( dot(a,random2(i+0.0)), dot(b,random2(i+o)), dot(c,random2(i+1.0)));\n    return dot(n, vec3(70.0));\n}\nvarying vec2 v_uv;\nvarying vec3 v_view;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvec4 vert() {\n  StandardVertInput In;\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_uv = a_texCoord;\n  float offset = noise2d(v_uv * vec2(5.0, 10.0) - 16.0 * cc_time.x) * 0.00125;\n  In.position.xyz += In.normal * offset;\n  In.position.x += v_uv.x * (noise2d(v_uv - 16.0 * cc_time.x) * 0.5 + 0.5) * 0.025;\n  vec4 worldPos = matWorld * In.position;\n  v_view = cc_cameraPos.xyz - worldPos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  return cc_matViewProj * worldPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec2 random2( vec2 p ) {\n    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat noise2d( in vec2 p ) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3 n = h*h*h*h*vec3( dot(a,random2(i+0.0)), dot(b,random2(i+o)), dot(c,random2(i+1.0)));\n    return dot(n, vec3(70.0));\n}\nvarying vec2 v_uv;\nvarying vec3 v_view;\nvarying vec3 v_normal;\nuniform sampler2D mainTexture;\n   uniform vec4 mainColorIn;\n   uniform vec4 mainColorOut;\n   uniform vec4 mainColorParams;\n   uniform vec4 lightNoiseParams;\n   uniform vec4 lightNoiseParams2;\n   uniform vec4 coreLightParams;\n#define saturate(a) clamp(a, 0.0, 1.0)\n#define u_colorStep         mainColorParams.xy\n#define u_colorExp          mainColorParams.z\n#define u_lightNoiseTiling  lightNoiseParams.xy\n#define u_lightNoiseFlow    lightNoiseParams.z\n#define u_lightNoiseExp     lightNoiseParams.w\n#define u_lightNoiseStep    lightNoiseParams2.xy\n#define u_coreLightStep     coreLightParams.xy\n#define u_coreLightExp      coreLightParams.z\n#define u_fresnelPower      lightNoiseParams2.z\n#define u_fresnelExp        lightNoiseParams2.w\n#define u_intensity         coreLightParams.w\nvec4 frag () {\n  vec4  color = mix(mainColorOut, mainColorIn, smoothstep(u_colorStep.y, u_colorStep.x, v_uv.x));\n  float noise = noise2d(v_uv.xy * u_lightNoiseTiling - vec2(u_lightNoiseFlow * cc_time.x, 0.0)) * 0.5 + 0.5;;\n  noise *= smoothstep(u_lightNoiseStep.y, u_lightNoiseStep.x, v_uv.x);\n  noise = saturate(noise);\n  float core = smoothstep(u_coreLightStep.y, u_coreLightStep.x, v_uv.x);\n  core = saturate(core);\n  float alpha = saturate(noise + core);\n  vec3 f = vec3(-1.,0.,0.);\n  vec3 v = normalize(v_view);\n  vec3 n = normalize(v_normal);\n  float VoN = abs(dot(n, v));\n  alpha *= VoN;\n  alpha*=smoothstep(1.-u_intensity,1.,1.-v_uv.x);\n  color.rgb*=u_intensity;\n  return vec4(color.rgb * 3., alpha);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":49}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../materials/flame|flame-vs:vert|flame-fs:frag","properties":{"mainColorIn":{"type":16,"value":[1,1,1,1]},"mainColorOut":{"type":16,"value":[1,1,1,1]},"colorStep":{"type":14,"value":[0.1,0.4],"handleInfo":["mainColorParams",0,14]},"colorExp":{"type":13,"value":[1],"handleInfo":["mainColorParams",2,13]},"lightNoiseTiling":{"type":14,"value":[1,1],"handleInfo":["lightNoiseParams",0,14]},"lightNoiseFlow":{"type":13,"value":[1],"handleInfo":["lightNoiseParams",2,13]},"lightNoiseExp":{"type":13,"value":[1],"handleInfo":["lightNoiseParams",3,13]},"lightNoiseStep":{"type":14,"value":[0.5,0.9],"handleInfo":["lightNoiseParams2",0,14]},"coreLightStep":{"type":14,"value":[0.1,0.4],"handleInfo":["coreLightParams",0,14]},"coreLightExp":{"type":13,"value":[1],"handleInfo":["coreLightParams",2,13]},"fresnelPower":{"type":13,"value":[1],"handleInfo":["lightNoiseParams2",2,13]},"fresnelExp":{"type":13,"value":[1],"handleInfo":["lightNoiseParams2",3,13]},"intensity":{"type":13,"value":[1],"handleInfo":["coreLightParams",3,13]},"mainColorParams":{"type":16,"value":[0.1,0.4,1,0]},"lightNoiseParams":{"type":16,"value":[1,1,1,1]},"lightNoiseParams2":{"type":16,"value":[0.5,0.9,1,1]},"coreLightParams":{"type":16,"value":[0.1,0.4,1,1]}}}]},{"name":"transparent","passes":[{"program":"../materials/flame|flame-vs:vert|flame-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainColorIn":{"type":16,"value":[1,1,1,1]},"mainColorOut":{"type":16,"value":[1,1,1,1]},"colorStep":{"type":14,"value":[0.1,0.4],"handleInfo":["mainColorParams",0,14]},"colorExp":{"type":13,"value":[1],"handleInfo":["mainColorParams",2,13]},"lightNoiseTiling":{"type":14,"value":[1,1],"handleInfo":["lightNoiseParams",0,14]},"lightNoiseFlow":{"type":13,"value":[1],"handleInfo":["lightNoiseParams",2,13]},"lightNoiseExp":{"type":13,"value":[1],"handleInfo":["lightNoiseParams",3,13]},"lightNoiseStep":{"type":14,"value":[0.5,0.9],"handleInfo":["lightNoiseParams2",0,14]},"coreLightStep":{"type":14,"value":[0.1,0.4],"handleInfo":["coreLightParams",0,14]},"coreLightExp":{"type":13,"value":[1],"handleInfo":["coreLightParams",2,13]},"fresnelPower":{"type":13,"value":[1],"handleInfo":["lightNoiseParams2",2,13]},"fresnelExp":{"type":13,"value":[1],"handleInfo":["lightNoiseParams2",3,13]},"intensity":{"type":13,"value":[1],"handleInfo":["coreLightParams",3,13]},"mainColorParams":{"type":16,"value":[0.1,0.4,1,0]},"lightNoiseParams":{"type":16,"value":[1,1,1,1]},"lightNoiseParams2":{"type":16,"value":[0.5,0.9,1,1]},"coreLightParams":{"type":16,"value":[0.1,0.4,1,1]}}}]}]]],0,0,[],[],[]],[[[11,"building01.low.022_Baked",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_NORMAL_MAP":true,"USE_PBR_MAP":true,"USE_OCCLUSION_MAP":true,"OCCLUSION_UV":"v_uv1","USE_DITHER_DISCARD":true}],[[[{"metallic":1,"normalScale":1.18},"mainTexture",6,0,"occlusionMap",6,1,"pbrMap",6,2,"normalMap",6,3]],11]]],0,0,[0,0,0,0,0],[6,8,9,11,3],[88,7,89,90,0]],[[[14,"enemy01"],[13,"enemy01",[-2],[5,"eaU1pGwtxbJZCKfoxh2CHq",null,null,null,-1,0]],[52,"enemy01_Baked",1,[[19,-3,[15,"4aP8lvZS5Z/p1GbaPtUF8D"],[0],[7],1]],[5,"83bJrAS+daepCtxB5EvKLb",null,null,null,1,0],[1,0.07700002193450928,0.07700002193450928,0.07700002193450928]]],0,[0,2,1,0,-1,2,0,0,2,0,7,1,3],[0,0],[-1,4],[22,91]],[[[10,".bin",2766666607,{"encoded":true,"compressed":true,"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11036,"length":1254,"count":1044,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11036,"count":330,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}],"minPosition":{"x":-2.0939838886260986,"y":-1.622951865196228,"z":-2.8130505084991455},"maxPosition":{"x":2.0326058864593506,"y":1.6229509115219116,"z":1.8827571868896484}}],-1],0,0,[],[],[]],[[[25,"spaceship",4,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_PBR_MAP":true,"USE_PARTICLE":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true,"USE_SWEEP_LIGHT":true}],[[[{"metallic":1},"emissiveColor",8,[4,4294967295],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2,"pbrMap",6,3,"normalMap",6,4,"noiseMap",6,5]],11]]],0,0,[0,0,0,0,0,0,0],[6,8,13,9,11,21,3],[92,93,94,95,96,23,0]],[[[11,"GlassBlack",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_NORMAL_MAP":true,"USE_PBR_MAP":true,"USE_OCCLUSION_MAP":true,"OCCLUSION_UV":"v_uv1","USE_DITHER_DISCARD":true}],[[[{"metallic":1,"normalScale":0.03},"mainColor",8,[4,4286808963],"pbrMap_ST",8,[2,0.1,0.1,0,0],"mainTexture",6,0,"occlusionMap",6,1,"pbrMap",6,2,"normalMap",6,3]],11]]],0,0,[0,0,0,0,0],[6,8,9,11,3],[97,7,98,99,0]]]]
